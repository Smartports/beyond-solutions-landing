#!/usr/bin/env node

/**
 * Test Runner - Ejecuta todas las pruebas del proyecto
 * Actualizado para usar el build en dist/
 */

const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs').promises;

// Configuración de tests
const TEST_CONFIG = {
  baseUrl: 'http://localhost:8000', // Cambiar a puerto 8000 para dist
  timeout: 30000,
  retries: 2,
};

// Lista de tests a ejecutar
const TESTS = [
  {
    name: 'Accessibility',
    script: 'test/accessibility/run-a11y-audit.js',
    description: 'Pruebas de accesibilidad WCAG 2.1 AA',
  },
  {
    name: 'Performance',
    script: 'test/performance/performance-test.js',
    description: 'Análisis de rendimiento y Core Web Vitals',
  },
  {
    name: 'Cross-Browser',
    script: 'test/integration/cross-browser-test.js',
    description: 'Compatibilidad cross-browser',
  },
  {
    name: 'Security',
    script: 'test/security/security-audit.js',
    description: 'Auditoría de seguridad',
  },
  {
    name: 'CSS Performance',
    script: 'test/performance-optimization/css-performance-analysis.js',
    description: 'Análisis de rendimiento CSS',
  },
  {
    name: 'Color Consistency',
    script: 'test/consistency/color-consistency-check.js',
    description: 'Verificación de consistencia de colores',
  },
];

// Función para ejecutar un test
function runTest(test) {
  return new Promise((resolve, reject) => {
    console.log(`Running ${test.name} tests...`);

    const child = spawn('node', [test.script], {
      stdio: 'inherit',
      env: {
        ...process.env,
        TEST_BASE_URL: TEST_CONFIG.baseUrl,
        TEST_TIMEOUT: TEST_CONFIG.timeout,
        TEST_RETRIES: TEST_CONFIG.retries,
      },
    });

    const timeout = setTimeout(() => {
      child.kill();
      reject(new Error(`Test ${test.name} timed out after ${TEST_CONFIG.timeout}ms`));
    }, TEST_CONFIG.timeout);

    child.on('close', (code) => {
      clearTimeout(timeout);
      console.log(`✅ ${test.name} tests completed`);
      resolve(code);
    });

    child.on('error', (error) => {
      clearTimeout(timeout);
      console.error(`❌ Error running ${test.name} tests:`, error);
      reject(error);
    });
  });
}

// Función para generar reporte final
async function generateSummaryReport(results) {
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const reportPath = path.join(__dirname, 'test-reports', `summary-report-${timestamp}.md`);

  // Asegurar que el directorio existe
  await fs.mkdir(path.dirname(reportPath), { recursive: true });

  const report = `# Test Summary Report

**Generated:** ${new Date().toISOString()}
**Configuration:** ${JSON.stringify(TEST_CONFIG, null, 2)}

## Test Results

${results
  .map(
    (result) => `
### ${result.name}
- **Status:** ${result.success ? '✅ PASSED' : '❌ FAILED'}
- **Duration:** ${result.duration}ms
- **Description:** ${result.description}
${result.error ? `- **Error:** ${result.error}` : ''}
`,
  )
  .join('\n')}

## Summary

- **Total Tests:** ${results.length}
- **Passed:** ${results.filter((r) => r.success).length}
- **Failed:** ${results.filter((r) => !r.success).length}
- **Success Rate:** ${((results.filter((r) => r.success).length / results.length) * 100).toFixed(1)}%

## Recommendations

${
  results.filter((r) => !r.success).length > 0
    ? `
### Failed Tests
${results
  .filter((r) => !r.success)
  .map((r) => `- Fix issues in ${r.name}: ${r.error}`)
  .join('\n')}
`
    : '✅ All tests passed successfully!'
}

---
*Generated by Beyond Solutions Test Suite*
`;

  await fs.writeFile(reportPath, report);
  console.log(`All tests completed. Summary report saved to: ${reportPath}`);
}

// Función principal
async function runAllTests() {
  console.log('Starting comprehensive test suite...');
  console.log(`Base URL: ${TEST_CONFIG.baseUrl}`);
  console.log(`Timeout: ${TEST_CONFIG.timeout}ms`);
  console.log('');

  const results = [];

  for (const test of TESTS) {
    const startTime = Date.now();

    try {
      await runTest(test);

      results.push({
        name: test.name,
        description: test.description,
        success: true,
        duration: Date.now() - startTime,
      });
    } catch (error) {
      results.push({
        name: test.name,
        description: test.description,
        success: false,
        duration: Date.now() - startTime,
        error: error.message,
      });
    }
  }

  // Generar reporte final
  await generateSummaryReport(results);
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  runAllTests().catch((error) => {
    console.error('❌ Test suite failed:', error);
    process.exit(1);
  });
}

module.exports = { runAllTests, TEST_CONFIG };
