---
description: 
globs: 
alwaysApply: false
---
# Project Structure Guide

This project is a landing page for Beyond Solutions, a platform for real estate development integration and management.

## Key Files
- [index.html](mdc:index.html) - Main entry point with the landing page HTML structure
- [js/main.js](mdc:js/main.js) - Main JavaScript file that initializes components
- [js/i18n.js](mdc:js/i18n.js) - Internationalization system implementation

## Directory Structure
- `css/` - Contains stylesheets including language selector and RTL support
- `i18n/` - Contains translation files and flag images for multilingual support
- `img/` - Image assets for the landing page
- `js/` - JavaScript modules for functionality

## Configuration Files
- [_config.yml](mdc:_config.yml) - Jekyll configuration for GitHub Pages
- [robots.txt](mdc:robots.txt) - Search engine configuration
- [sitemap.xml](mdc:sitemap.xml) - Site map for SEO

## SEO and Accessibility
The site is optimized for SEO with proper meta tags, hreflang annotations, and a comprehensive sitemap. Accessibility features include keyboard navigation, ARIA attributes, and proper color contrast.

## Monorepo Workspace
- The repository uses a monorepo layout managed via npm workspaces/Bun with a root `package.json`.
- Apps:
  - `apps/web/` – React + TypeScript front-end built with Vite and TailwindCSS.
- Packages:
  - `packages/core/` – Shared core utilities, IndexedDB storage, and the TypeScript i18n implementation ([packages/core/src/i18n/i18n.ts](mdc:packages/core/src/i18n/i18n.ts)).
  - `packages/ui/` – Re-usable React UI primitives such as `StepContainer`, `SelectCard`, and `Dashboard`.
  - `packages/geo/` – GIS/CAD importers and the Three/Babylon-based terrain renderer.
  - `packages/maps/` – Google Maps configuration and React components.
  - `packages/finance/` – Financial calculation engine and visualisation widgets.
  - `packages/experience3d/` – Immersive 3D viewer, gamification, and export systems.

## Build & Tooling
- React workspaces are bootstrapped with Vite (`apps/web/vite.config.ts`).
- TailwindCSS is configured per workspace through `tailwind.config.js`, extending a shared base preset.
- Each workspace ships its own `tsconfig.json` that extends the root configuration for strict type-safety.
- Linting and formatting are enforced project-wide via shared ESLint/Prettier configs.

## Deployment
- Static landing pages are served via GitHub Pages from the repository root.
- The React application is built with Vite and output to `apps/web/dist`.
- PWA assets (manifest & service worker) are generated during the build step and deployed alongside the landing pages.
