---
description: 
globs: 
alwaysApply: false
---
# Frontend Patterns

## UI Framework
- `apps/web` uses **React + TypeScript** powered by Vite and TailwindCSS via PostCSS.
- Static landing pages (e.g. [index.html](mdc:index.html)) rely on TailwindCSS via CDN with **Alpine.js** for light reactive behaviour.
- AOS (Animate On Scroll) is leveraged only on static pages for scroll animations.

## Component Structure
- Alpine.js components are defined with `x-data` attribute
- Navigation component defined as `x-data="nav"`
- Language selector as a standalone component
- Theme toggle with light/dark mode support

## Theme Management
- Dark mode support via Tailwind's `dark:` variant
- User preference stored in localStorage
- System preference detection with `prefers-color-scheme` media query
- Toggle button for manual user preference

## Responsive Design
- Mobile-first approach with responsive breakpoints
- Mobile menu toggle for smaller screens
- Responsive typography and spacing
- Media queries for fine-tuning specific screen ranges

## Performance Optimization
- Lazy loading for non-critical images
- Preloading critical images
- Reduced animation for users with `prefers-reduced-motion`
- Debounced event listeners for scroll/resize events
- Efficient Alpine.js reactivity

## React Component Guidelines
- Follow **function component** style and the `PascalCase` naming convention (e.g. `TerrainViewer3D`).
- Group components under `src/components/` and export them through a package barrel (`index.ts`).
- Use **TailwindCSS** utility classes directly or via `clsx` for conditional styling.
- Prefer **React.lazy** and **Suspense** for code-splitting of heavy modules (3D viewer, finance dashboards).
- Co-locate tests next to components with the `.test.tsx` suffix and Storybook stories under `*.stories.tsx` (where applicable).
